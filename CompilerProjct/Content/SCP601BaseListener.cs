//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SCP601.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISCP601Listener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class SCP601BaseListener : ISCP601Listener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] SCP601Parser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] SCP601Parser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.entry"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEntry([NotNull] SCP601Parser.EntryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.entry"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEntry([NotNull] SCP601Parser.EntryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.member"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember([NotNull] SCP601Parser.MemberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.member"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember([NotNull] SCP601Parser.MemberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] SCP601Parser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] SCP601Parser.FunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArguments([NotNull] SCP601Parser.ArgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArguments([NotNull] SCP601Parser.ArgumentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument([NotNull] SCP601Parser.ArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument([NotNull] SCP601Parser.ArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.struct"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStruct([NotNull] SCP601Parser.StructContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.struct"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStruct([NotNull] SCP601Parser.StructContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.struct_members"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStruct_members([NotNull] SCP601Parser.Struct_membersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.struct_members"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStruct_members([NotNull] SCP601Parser.Struct_membersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.global"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGlobal([NotNull] SCP601Parser.GlobalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.global"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGlobal([NotNull] SCP601Parser.GlobalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.variables"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariables([NotNull] SCP601Parser.VariablesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.variables"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariables([NotNull] SCP601Parser.VariablesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable([NotNull] SCP601Parser.VariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable([NotNull] SCP601Parser.VariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] SCP601Parser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] SCP601Parser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpression([NotNull] SCP601Parser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpression([NotNull] SCP601Parser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpression([NotNull] SCP601Parser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpression([NotNull] SCP601Parser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierAssignExpression([NotNull] SCP601Parser.IdentifierAssignExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierAssignExpression([NotNull] SCP601Parser.IdentifierAssignExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>falseExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFalseExpression([NotNull] SCP601Parser.FalseExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>falseExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFalseExpression([NotNull] SCP601Parser.FalseExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparisonExpression([NotNull] SCP601Parser.ComparisonExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparisonExpression([NotNull] SCP601Parser.ComparisonExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpression([NotNull] SCP601Parser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpression([NotNull] SCP601Parser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalExpression([NotNull] SCP601Parser.LogicalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalExpression([NotNull] SCP601Parser.LogicalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>integerExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegerExpression([NotNull] SCP601Parser.IntegerExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>integerExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegerExpression([NotNull] SCP601Parser.IntegerExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>preFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPreFixExpression([NotNull] SCP601Parser.PreFixExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>preFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPreFixExpression([NotNull] SCP601Parser.PreFixExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedExpression([NotNull] SCP601Parser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedExpression([NotNull] SCP601Parser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>dotIdentifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDotIdentifierExpression([NotNull] SCP601Parser.DotIdentifierExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>dotIdentifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDotIdentifierExpression([NotNull] SCP601Parser.DotIdentifierExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>trueExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTrueExpression([NotNull] SCP601Parser.TrueExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>trueExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTrueExpression([NotNull] SCP601Parser.TrueExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNullExpression([NotNull] SCP601Parser.NullExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNullExpression([NotNull] SCP601Parser.NullExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>dotIdentifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDotIdentifierAssignExpression([NotNull] SCP601Parser.DotIdentifierAssignExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>dotIdentifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDotIdentifierAssignExpression([NotNull] SCP601Parser.DotIdentifierAssignExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCallExpression([NotNull] SCP601Parser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCallExpression([NotNull] SCP601Parser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>realExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRealExpression([NotNull] SCP601Parser.RealExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>realExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRealExpression([NotNull] SCP601Parser.RealExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryExpression([NotNull] SCP601Parser.UnaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryExpression([NotNull] SCP601Parser.UnaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>postFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostFixExpression([NotNull] SCP601Parser.PostFixExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>postFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostFixExpression([NotNull] SCP601Parser.PostFixExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.expr_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr_list([NotNull] SCP601Parser.Expr_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.expr_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr_list([NotNull] SCP601Parser.Expr_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.unaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryOp([NotNull] SCP601Parser.UnaryOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.unaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryOp([NotNull] SCP601Parser.UnaryOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.multypleOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultypleOp([NotNull] SCP601Parser.MultypleOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.multypleOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultypleOp([NotNull] SCP601Parser.MultypleOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.additiveOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveOp([NotNull] SCP601Parser.AdditiveOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.additiveOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveOp([NotNull] SCP601Parser.AdditiveOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.compareOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompareOp([NotNull] SCP601Parser.CompareOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.compareOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompareOp([NotNull] SCP601Parser.CompareOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.logicalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOp([NotNull] SCP601Parser.LogicalOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.logicalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOp([NotNull] SCP601Parser.LogicalOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] SCP601Parser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] SCP601Parser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifElseStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfElseStatement([NotNull] SCP601Parser.IfElseStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifElseStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfElseStatement([NotNull] SCP601Parser.IfElseStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] SCP601Parser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] SCP601Parser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] SCP601Parser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] SCP601Parser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>withStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithStatement([NotNull] SCP601Parser.WithStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>withStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithStatement([NotNull] SCP601Parser.WithStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] SCP601Parser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] SCP601Parser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>variableDeclarationStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclarationStatement([NotNull] SCP601Parser.VariableDeclarationStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variableDeclarationStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclarationStatement([NotNull] SCP601Parser.VariableDeclarationStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyStatement([NotNull] SCP601Parser.EmptyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyStatement([NotNull] SCP601Parser.EmptyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStatement([NotNull] SCP601Parser.BlockStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStatement([NotNull] SCP601Parser.BlockStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] SCP601Parser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] SCP601Parser.ReturnStatementContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
