//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SCP601.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="SCP601Parser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ISCP601Listener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] SCP601Parser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] SCP601Parser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntry([NotNull] SCP601Parser.EntryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntry([NotNull] SCP601Parser.EntryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember([NotNull] SCP601Parser.MemberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember([NotNull] SCP601Parser.MemberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction([NotNull] SCP601Parser.FunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction([NotNull] SCP601Parser.FunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] SCP601Parser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] SCP601Parser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument([NotNull] SCP601Parser.ArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument([NotNull] SCP601Parser.ArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.struct"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStruct([NotNull] SCP601Parser.StructContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.struct"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStruct([NotNull] SCP601Parser.StructContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.struct_members"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStruct_members([NotNull] SCP601Parser.Struct_membersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.struct_members"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStruct_members([NotNull] SCP601Parser.Struct_membersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.global"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGlobal([NotNull] SCP601Parser.GlobalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.global"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGlobal([NotNull] SCP601Parser.GlobalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.variables"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariables([NotNull] SCP601Parser.VariablesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.variables"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariables([NotNull] SCP601Parser.VariablesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] SCP601Parser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] SCP601Parser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] SCP601Parser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] SCP601Parser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] SCP601Parser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] SCP601Parser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] SCP601Parser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] SCP601Parser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierAssignExpression([NotNull] SCP601Parser.IdentifierAssignExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierAssignExpression([NotNull] SCP601Parser.IdentifierAssignExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>falseExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFalseExpression([NotNull] SCP601Parser.FalseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>falseExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFalseExpression([NotNull] SCP601Parser.FalseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonExpression([NotNull] SCP601Parser.ComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonExpression([NotNull] SCP601Parser.ComparisonExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] SCP601Parser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] SCP601Parser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalExpression([NotNull] SCP601Parser.LogicalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalExpression([NotNull] SCP601Parser.LogicalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>integerExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerExpression([NotNull] SCP601Parser.IntegerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>integerExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerExpression([NotNull] SCP601Parser.IntegerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreFixExpression([NotNull] SCP601Parser.PreFixExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreFixExpression([NotNull] SCP601Parser.PreFixExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] SCP601Parser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] SCP601Parser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dotIdentifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDotIdentifierExpression([NotNull] SCP601Parser.DotIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dotIdentifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDotIdentifierExpression([NotNull] SCP601Parser.DotIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>trueExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrueExpression([NotNull] SCP601Parser.TrueExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>trueExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrueExpression([NotNull] SCP601Parser.TrueExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullExpression([NotNull] SCP601Parser.NullExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullExpression([NotNull] SCP601Parser.NullExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dotIdentifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDotIdentifierAssignExpression([NotNull] SCP601Parser.DotIdentifierAssignExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dotIdentifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDotIdentifierAssignExpression([NotNull] SCP601Parser.DotIdentifierAssignExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] SCP601Parser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] SCP601Parser.FunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>realExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRealExpression([NotNull] SCP601Parser.RealExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>realExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRealExpression([NotNull] SCP601Parser.RealExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpression([NotNull] SCP601Parser.UnaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpression([NotNull] SCP601Parser.UnaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>postFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostFixExpression([NotNull] SCP601Parser.PostFixExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>postFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostFixExpression([NotNull] SCP601Parser.PostFixExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.expr_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_list([NotNull] SCP601Parser.Expr_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.expr_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_list([NotNull] SCP601Parser.Expr_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryOp([NotNull] SCP601Parser.UnaryOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryOp([NotNull] SCP601Parser.UnaryOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.multypleOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultypleOp([NotNull] SCP601Parser.MultypleOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.multypleOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultypleOp([NotNull] SCP601Parser.MultypleOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.additiveOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveOp([NotNull] SCP601Parser.AdditiveOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.additiveOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveOp([NotNull] SCP601Parser.AdditiveOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompareOp([NotNull] SCP601Parser.CompareOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompareOp([NotNull] SCP601Parser.CompareOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SCP601Parser.logicalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOp([NotNull] SCP601Parser.LogicalOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SCP601Parser.logicalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOp([NotNull] SCP601Parser.LogicalOpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] SCP601Parser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] SCP601Parser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifElseStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfElseStatement([NotNull] SCP601Parser.IfElseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifElseStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfElseStatement([NotNull] SCP601Parser.IfElseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] SCP601Parser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] SCP601Parser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] SCP601Parser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] SCP601Parser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>withStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithStatement([NotNull] SCP601Parser.WithStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>withStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithStatement([NotNull] SCP601Parser.WithStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] SCP601Parser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] SCP601Parser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variableDeclarationStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationStatement([NotNull] SCP601Parser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variableDeclarationStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationStatement([NotNull] SCP601Parser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] SCP601Parser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] SCP601Parser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatement([NotNull] SCP601Parser.BlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatement([NotNull] SCP601Parser.BlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] SCP601Parser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] SCP601Parser.ReturnStatementContext context);
}
