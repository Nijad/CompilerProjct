//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SCP601.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="SCP601Parser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ISCP601Visitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] SCP601Parser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEntry([NotNull] SCP601Parser.EntryContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMember([NotNull] SCP601Parser.MemberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction([NotNull] SCP601Parser.FunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArguments([NotNull] SCP601Parser.ArgumentsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgument([NotNull] SCP601Parser.ArgumentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.struct"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStruct([NotNull] SCP601Parser.StructContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.struct_members"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStruct_members([NotNull] SCP601Parser.Struct_membersContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.global"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGlobal([NotNull] SCP601Parser.GlobalContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.variables"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariables([NotNull] SCP601Parser.VariablesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] SCP601Parser.VariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] SCP601Parser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveExpression([NotNull] SCP601Parser.AdditiveExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] SCP601Parser.IdentifierExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>identifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierAssignExpression([NotNull] SCP601Parser.IdentifierAssignExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>falseExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFalseExpression([NotNull] SCP601Parser.FalseExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonExpression([NotNull] SCP601Parser.ComparisonExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeExpression([NotNull] SCP601Parser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalExpression([NotNull] SCP601Parser.LogicalExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>integerExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntegerExpression([NotNull] SCP601Parser.IntegerExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreFixExpression([NotNull] SCP601Parser.PreFixExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] SCP601Parser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>dotIdentifierExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDotIdentifierExpression([NotNull] SCP601Parser.DotIdentifierExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>trueExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTrueExpression([NotNull] SCP601Parser.TrueExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullExpression([NotNull] SCP601Parser.NullExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>dotIdentifierAssignExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDotIdentifierAssignExpression([NotNull] SCP601Parser.DotIdentifierAssignExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallExpression([NotNull] SCP601Parser.FunctionCallExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>realExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRealExpression([NotNull] SCP601Parser.RealExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryExpression([NotNull] SCP601Parser.UnaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>postFixExpression</c>
	/// labeled alternative in <see cref="SCP601Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostFixExpression([NotNull] SCP601Parser.PostFixExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.expr_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_list([NotNull] SCP601Parser.Expr_listContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryOp([NotNull] SCP601Parser.UnaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.multypleOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultypleOp([NotNull] SCP601Parser.MultypleOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.additiveOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveOp([NotNull] SCP601Parser.AdditiveOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompareOp([NotNull] SCP601Parser.CompareOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SCP601Parser.logicalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOp([NotNull] SCP601Parser.LogicalOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] SCP601Parser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ifElseStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfElseStatement([NotNull] SCP601Parser.IfElseStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] SCP601Parser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] SCP601Parser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>withStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWithStatement([NotNull] SCP601Parser.WithStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionStatement([NotNull] SCP601Parser.ExpressionStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>variableDeclarationStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclarationStatement([NotNull] SCP601Parser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptyStatement([NotNull] SCP601Parser.EmptyStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>blockStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockStatement([NotNull] SCP601Parser.BlockStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="SCP601Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] SCP601Parser.ReturnStatementContext context);
}
